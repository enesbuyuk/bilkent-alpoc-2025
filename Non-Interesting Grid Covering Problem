import sys
from collections import deque
input = sys.stdin.readline

T = int(input())
for _ in range(T):
    n, m = map(int, input().split())
    G = [input().rstrip() for _ in range(n)]
    h_id = [[0]*m for _ in range(n)]
    H = 0
    for i in range(n):
        cur = 0
        for j in range(m):
            if G[i][j]=='.':
                if cur==0:
                    H += 1
                    cur = H
                h_id[i][j] = cur
            else:
                cur = 0
    v_id = [[0]*m for _ in range(n)]
    V = 0
    for j in range(m):
        cur = 0
        for i in range(n):
            if G[i][j]=='.':
                if cur==0:
                    V += 1
                    cur = V
                v_id[i][j] = cur
            else:
                cur = 0
    adj = [[] for _ in range(H+1)]
    for i in range(n):
        for j in range(m):
            if G[i][j]=='.':
                adj[h_id[i][j]].append(v_id[i][j])
    pairU = [0]*(H+1)
    pairV = [0]*(V+1)
    dist  = [0]*(H+1)
    INF = 10**9

    def bfs():
        q = deque()
        for u in range(1, H+1):
            if pairU[u]==0:
                dist[u] = 0
                q.append(u)
            else:
                dist[u] = INF
        dist[0] = INF
        while q:
            u = q.popleft()
            if dist[u] < dist[0]:
                for v in adj[u]:
                    if dist[pairV[v]] == INF:
                        dist[pairV[v]] = dist[u] + 1
                        q.append(pairV[v])
        return dist[0] != INF

    def dfs(u):
        if u:
            for v in adj[u]:
                if dist[pairV[v]] == dist[u] + 1 and dfs(pairV[v]):
                    pairU[u] = v
                    pairV[v] = u
                    return True
            dist[u] = INF
            return False
        return True

    matched = 0
    while bfs():
        for u in range(1, H+1):
            if pairU[u]==0 and dfs(u):
                matched += 1

    print(matched)
